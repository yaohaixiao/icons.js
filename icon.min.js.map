{"version":3,"file":"icon.min.js","sources":["utils/toString.js","utils/isArray.js","utils/isString.js","utils/isObject.js","utils/isFunction.js","utils/isDOM.js","utils/isElement.js","utils/isHTMLCollection.js","utils/isFragment.js","utils/isTextNode.js","utils/setAttributes.js","utils/hasOwn.js","utils/setAttribute.js","createElement.js","utils/isSVG.js","utils/createElement.js","icon.js"],"sourcesContent":["/**\n * Object 对象原型上的 toString 方法\n * ========================================================================\n * @method toString\n * @param {*} val\n * @returns {string}\n */\nconst toString = (val) => {\n  return Object.prototype.toString.apply(val)\n}\n\nexport default toString\n","import toString from './toString'\r\n\r\n/**\r\n * 检测数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isArray = (o) => {\r\n  if (Array.isArray) {\r\n    return Array.isArray(o)\r\n  } else {\r\n    return toString(o) === '[object Array]'\r\n  }\r\n}\r\n\r\nexport default isArray\r\n","/**\n * 检测数据是否为 String 类型\n * ========================================================================\n * @method isArray\n * @param {*} str\n * @returns {boolean}\n */\nconst isString = (str) => {\n  return typeof str === 'string'\n}\n\nexport default isString\n","import toString from './toString'\nimport isFunction from './isFunction'\n\n/**\n * 检测数据是否为 Object 类型\n * ========================================================================\n * @method isObject\n * @param {*} o\n * @returns {boolean}\n */\nconst isObject = (o) => {\n  return (\n    (toString(o) === '[object Object]' ||\n      typeof o === 'object' ||\n      isFunction(o)) &&\n    o !== null\n  )\n}\n\nexport default isObject\n","import toString from './toString'\n\n/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @param {*} val - （必须）待检测的数据\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  return typeof val === 'function' || toString(val) === '[object Function]'\n}\n\nexport default isFunction\n","import isObject from './isObject'\r\nimport isElement from './isElement'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isFragment from './isFragment'\r\nimport isTextNode from './isTextNode'\r\n\r\nconst isDOM = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (isElement(el) || isHTMLCollection(el) || isFragment(el) || isTextNode(el))\r\n  )\r\n}\r\n\r\nexport default isDOM\r\n","import isObject from './isObject'\n\n/**\n * 检测数据是否为 HTMLElement DOM 节点\n * ========================================================================\n * @method isElement\n * @param {*} o\n * @returns {boolean}\n */\nconst isElement = (o) => {\n  return !!(isObject(o) && o.nodeName && o.tagName && o.nodeType === 1)\n}\n\nexport default isElement\n","import toString from './toString'\r\nimport isObject from './isObject'\r\n\r\nconst isHTMLCollection = (el) => {\r\n  return !!(isObject(el) && toString(el) === '[object NodeList]')\r\n}\r\n\r\nexport default isHTMLCollection\r\n","import toString from './toString'\nimport isObject from './isObject'\n\nconst isFragment = (fragment) => {\n  return !!(\n    isObject(fragment) && toString(fragment) === '[object DocumentFragment]'\n  )\n}\n\nexport default isFragment\n","import toString from './toString'\r\nimport isObject from './isObject'\r\n\r\nconst isTextNode = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (toString(el) === '[object Text]' || (el.tagName && el.nodeType === 3))\r\n  )\r\n}\r\n\r\nexport default isTextNode\r\n","import isObject from './isObject'\nimport hasOwn from './hasOwn'\nimport setAttribute from './setAttribute'\n\nconst setAttributes = (el, attrs) => {\n  if (!el || !isObject(attrs)) {\n    return false\n  }\n\n  Object.keys(attrs).forEach((attr) => {\n    const value = attrs[attr]\n    if (hasOwn(attrs, attr)) {\n      setAttribute(el, attr, value)\n    }\n  })\n}\n\nexport default setAttributes\n","/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  const hasOwnProperty = Object.prototype.hasOwnProperty\n  return obj && hasOwnProperty.call(obj, prop)\n}\n\nexport default hasOwn\n","/**\n * 给 DOM 节点设置属性/值\n * ========================================================================\n * @method setAttribute\n * @param {HTMLElement} el - DOM 节点\n * @param {String} attr - 属性名称\n * @param {String|Number|Boolean} value - 属性值\n */\nconst setAttribute = (el, attr, value) => {\n  let tagName = el.tagName.toLowerCase()\n\n  switch (attr) {\n    case 'style':\n      el.style.cssText = value\n      break\n    case 'value':\n      if (tagName === 'input' || tagName === 'textarea') {\n        el.value = value\n      } else {\n        el.setAttribute(attr, value)\n      }\n      break\n    case 'className':\n      el.className = value\n      break\n    case 'innerHTML':\n      el.innerHTML = value\n      break\n    case 'innerText':\n      el.innerText = value\n      break\n    default:\n      el.setAttribute(attr, value)\n      break\n  }\n}\n\nexport default setAttribute\n","import isArray from './utils/isArray'\r\nimport isString from './utils/isString'\r\nimport isSVG from './utils/isSVG'\r\nimport _createElement from './utils/createElement'\r\nimport setAttributes from './utils/setAttributes'\r\n\r\n/**\r\n * 创建 SVG 图标 DOM 元素\r\n * ========================================================================\r\n * @method createElement\r\n * @param {String} name - （必须）当前图标集中的图标名称或者完整的 SVG 图标字符串\r\n * @param {Object} [options] - （可选）配置参数对象\r\n * @param {Number|Array} [options.size] - （可选）图标大小，Number 类型高和宽相等，Array 类型可以单独设置高和宽\r\n * @param {String} [options.color] - （可选）图标颜色\r\n * @param {String} [options.iconSet] - （可选）图标集的名称\r\n * @param {Object} [options.attrs] - （可选）给创建的 icons 元素设置的 HTML 属性对象\r\n * @returns {HTMLElement}\r\n */\r\nconst createElement = (name, options = {}) => {\r\n  const ICON = 'ijs-icon'\r\n  const size = options.size || 0\r\n  const isArraySize = isArray(size)\r\n  const color = options.color || ''\r\n  const iconSet = options.iconSet || ''\r\n  const width = isArraySize ? size[0] : size\r\n  const height = isArraySize ? size[1] : size\r\n  const defaultRules = size ? `width:${width}px;height:${height}px;` : ''\r\n  const cssRules = color ? defaultRules + `color:${color}` : defaultRules\r\n  const attrs = options.attrs || {}\r\n  let binds = ''\r\n  let svg = ''\r\n  let $icon\r\n  let $svg\r\n\r\n  if (!isString(name)) {\r\n    return null\r\n  }\r\n\r\n  if (isSVG(name)) {\r\n    svg = name\r\n  } else {\r\n    binds =\r\n      iconSet && iconSet !== 'icon'\r\n        ? `xlink:href=\"#${iconSet}-icon-${name}\"`\r\n        : `xlink:href=\"#icon-${name}\"`\r\n    svg = `<svg><use ${binds}></use></svg>`\r\n  }\r\n\r\n  attrs.innerHTML = svg\r\n\r\n  if (attrs.className) {\r\n    attrs.className = `${ICON} ${attrs.className}`\r\n  } else {\r\n    attrs.className = `${ICON}`\r\n  }\r\n\r\n  $icon = _createElement('i', attrs)\r\n\r\n  $svg = $icon.querySelector('svg')\r\n  setAttributes($svg, {\r\n    'aria-hidden': true,\r\n    xmlns: 'http://www.w3.org/2000/svg',\r\n    class: 'ijs-icon__svg',\r\n    width: 200,\r\n    height: 200,\r\n    style: cssRules\r\n  })\r\n\r\n  return $icon\r\n}\r\n\r\nexport default createElement\r\n","import isString from './isString'\r\n\r\nconst isSVG = (str) => {\r\n  const declaration = '(?:<\\\\?xml[^>]*>\\\\s*)?'\r\n  const doctype =\r\n    '(?:<\\\\!doctype svg[^>]*\\\\s*(?:\\\\[?(?:\\\\s*<![^>]*>\\\\s*)*\\\\]?)*[^>]*>\\\\s*)?'\r\n  const content = '<svg[^>]*>[^]*<\\\\/svg>\\\\s*$'\r\n  const svg = `^\\\\s*${declaration}${doctype}${content}\\\\s*$`\r\n  const pattern = new RegExp(svg, 'i')\r\n\r\n  return isString(str) && pattern.test(str)\r\n}\r\n\r\nexport default isSVG\r\n","import isObject from './isObject'\nimport isString from './isString'\nimport isArray from './isArray'\nimport isDOM from './isDOM'\nimport setAttributes from './setAttributes'\n\n/**\n * 创建 DOM 节点，并添加属性和子节点\n * ========================================================================\n * @method createElement\n * @param {String} tagName - 标签名称\n * @param {Object|Array|HTMLElement|DocumentFragment|String} attrs - 属性对象或者子节点\n * @param {Array|HTMLElement|DocumentFragment|String} [children] - 子节点数组\n * @returns {HTMLElement}\n */\nconst createElement = (tagName, attrs, children) => {\n  const $fragment = document.createDocumentFragment()\n  const $el = document.createElement(tagName)\n  const isValidChild = (child) => {\n    return isDOM(child) || isString(child)\n  }\n  const append = (child) => {\n    let $child\n\n    if (!isValidChild(child)) {\n      return false\n    }\n\n    if (isDOM(child)) {\n      $child = child\n    } else if (isString(child)) {\n      $child = document.createTextNode(child)\n    }\n\n    $fragment.appendChild($child)\n  }\n\n  if (isObject(attrs)) {\n    setAttributes($el, attrs)\n  } else if (isArray(attrs) && attrs.every((attr) => isValidChild(attr))) {\n    attrs.forEach((child) => {\n      append(child)\n    })\n  } else if (isDOM(attrs)) {\n    append(attrs)\n  } else if (isString(attrs)) {\n    append(document.createTextNode(attrs))\n  }\n\n  if (isArray(children)) {\n    children.forEach((child) => {\n      append(child)\n    })\n  } else {\n    append(children)\n  }\n\n  $el.appendChild($fragment)\n\n  return $el\n}\n\nexport default createElement\n","import createElement from './createElement'\r\n\r\n/**\r\n * 创建 SVG 图标 DOM 元素\r\n * ========================================================================\r\n * @method icon\r\n * @alias createElement\r\n * @see createElement\r\n * @param {String} name\r\n * @param {Object} [options]\r\n * @param {Number|Array} [options.size]\r\n * @param {String} [options.color]\r\n * @param {String} [options.iconSet]\r\n * @param {Object} [options.attrs]\r\n * @returns {HTMLElement}\r\n */\r\nconst icon = (name, options = {}) => {\r\n  return createElement(name, options)\r\n}\r\n\r\nexport default icon\r\n"],"names":["toString","val","Object","prototype","apply","isArray","o","Array","isString","str","isObject","isDOM","el","nodeName","tagName","nodeType","isHTMLCollection","fragment","isTextNode","setAttributes","attrs","keys","forEach","attr","value","obj","prop","hasOwnProperty","call","hasOwn","toLowerCase","style","cssText","setAttribute","className","innerHTML","innerText","createElement","name","options","ICON","size","isArraySize","color","iconSet","width","height","defaultRules","cssRules","$icon","$svg","binds","svg","pattern","RegExp","test","isSVG","children","$fragment","document","createDocumentFragment","$el","isValidChild","child","append","$child","createTextNode","appendChild","every","_createElement","querySelector","xmlns","class"],"mappings":"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"}