{"version":3,"file":"icon.min.js","sources":["utils/toString.js","utils/isString.js","utils/isObject.js","utils/isFunction.js","utils/setAttributes.js","utils/hasOwn.js","utils/setAttribute.js","createElement.js","utils/isArray.js","utils/isSVG.js","icon.js"],"sourcesContent":["/**\r\n * Object 对象原型上的 toString 方法\r\n * ========================================================================\r\n * @method toString\r\n * @param {*} val\r\n * @returns {string}\r\n */\r\nconst toString = (val) => {\r\n  return Object.prototype.toString.apply(val)\r\n}\r\n\r\nexport default toString\r\n","/**\r\n * 检测数据是否为 String 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} str\r\n * @returns {boolean}\r\n */\r\nconst isString = (str) => {\r\n  return typeof str === 'string'\r\n}\r\n\r\nexport default isString\r\n","import toString from './toString'\r\nimport isFunction from './isFunction'\r\n\r\n/**\r\n * 检测数据是否为 Object 类型\r\n * ========================================================================\r\n * @method isObject\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isObject = (o) => {\r\n  return (\r\n    (toString(o) === '[object Object]' ||\r\n      typeof o === 'object' ||\r\n      isFunction(o)) &&\r\n    o !== null\r\n  )\r\n}\r\n\r\nexport default isObject\r\n","import toString from './toString'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  return typeof val === 'function' || toString(val) === '[object Function]'\r\n}\r\n\r\nexport default isFunction\r\n","import isObject from './isObject'\r\nimport hasOwn from './hasOwn'\r\nimport setAttribute from './setAttribute'\r\n\r\nconst setAttributes = (el, attrs) => {\r\n  if (!el || !isObject(attrs)) {\r\n    return false\r\n  }\r\n\r\n  Object.keys(attrs).forEach((attr) => {\r\n    const value = attrs[attr]\r\n    if (hasOwn(attrs, attr)) {\r\n      setAttribute(el, attr, value)\r\n    }\r\n  })\r\n}\r\n\r\nexport default setAttributes\r\n","/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n  return obj && hasOwnProperty.call(obj, prop)\r\n}\r\n\r\nexport default hasOwn\r\n","/**\r\n * 给 DOM 节点设置属性/值\r\n * ========================================================================\r\n * @method setAttribute\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} attr - 属性名称\r\n * @param {String|Number|Boolean} value - 属性值\r\n */\r\nconst setAttribute = (el, attr, value) => {\r\n  let tagName = el.tagName.toLowerCase()\r\n\r\n  switch (attr) {\r\n    case 'style':\r\n      el.style.cssText = value\r\n      break\r\n    case 'value':\r\n      if (tagName === 'input' || tagName === 'textarea') {\r\n        el.value = value\r\n      } else {\r\n        el.setAttribute(attr, value)\r\n      }\r\n      break\r\n    case 'className':\r\n      el.className = value\r\n      break\r\n    case 'innerHTML':\r\n      el.innerHTML = value\r\n      break\r\n    case 'innerText':\r\n      el.innerText = value\r\n      break\r\n    default:\r\n      el.setAttribute(attr, value)\r\n      break\r\n  }\r\n}\r\n\r\nexport default setAttribute\r\n","import isArray from './utils/isArray'\r\nimport isString from './utils/isString'\r\nimport isSVG from './utils/isSVG'\r\nimport setAttributes from './utils/setAttributes'\r\n\r\n/**\r\n * 创建 SVG 图标 DOM 元素\r\n * ========================================================================\r\n * @method createElement\r\n * @param {String} name - （必须）当前图标集中的图标名称或者完整的 SVG 图标字符串\r\n * @param {Object} [options] - （可选）配置参数对象\r\n * @param {Number|Array} [options.size] - （可选）图标大小，Number 类型高和宽相等，Array 类型可以单独设置高和宽\r\n * @param {String} [options.color] - （可选）图标颜色\r\n * @param {String} [options.iconSet] - （可选）图标集的名称\r\n * @param {Object} [options.attrs] - （可选）给创建的 icons 元素设置的 HTML 属性对象\r\n * @returns {HTMLElement}\r\n */\r\nconst createElement = (name, options = {}) => {\r\n  const ICON = 'ijs-icon'\r\n  const size = options.size || 0\r\n  const isArraySize = isArray(size)\r\n  const color = options.color || ''\r\n  const iconSet = options.iconSet || ''\r\n  const width = isArraySize ? size[0] : size\r\n  const height = isArraySize ? size[1] : size\r\n  const defaultRules = size ? `width:${width}px;height:${height}px;` : ''\r\n  const cssRules = color ? defaultRules + `color:${color}` : defaultRules\r\n  const attrs = options.attrs || {}\r\n  const $icon = document.createElement('i')\r\n  let binds = ''\r\n  let svg = ''\r\n  let $svg\r\n\r\n  if (!isString(name)) {\r\n    return null\r\n  }\r\n\r\n  if (isSVG(name)) {\r\n    svg = name\r\n  } else {\r\n    binds =\r\n      iconSet && iconSet !== 'icon'\r\n        ? `xlink:href=\"#${iconSet}-icon-${name}\"`\r\n        : `xlink:href=\"#icon-${name}\"`\r\n    svg = `<svg><use ${binds}></use></svg>`\r\n  }\r\n\r\n  $icon.innerHTML = svg\r\n\r\n  if (attrs.className) {\r\n    attrs.className = `${ICON} ${attrs.className}`\r\n  } else {\r\n    attrs.className = `${ICON}`\r\n  }\r\n\r\n  setAttributes($icon, attrs)\r\n\r\n  $svg = $icon.querySelector('svg')\r\n  setAttributes($svg, {\r\n    'aria-hidden': true,\r\n    xmlns: 'http://www.w3.org/2000/svg',\r\n    class: 'ijs-icon__svg',\r\n    width: 200,\r\n    height: 200,\r\n    style: cssRules\r\n  })\r\n\r\n  return $icon\r\n}\r\n\r\nexport default createElement\r\n","import toString from './toString'\r\n\r\n/**\r\n * 检测数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isArray = (o) => {\r\n  if (Array.isArray) {\r\n    return Array.isArray(o)\r\n  } else {\r\n    return toString(o) === '[object Array]'\r\n  }\r\n}\r\n\r\nexport default isArray\r\n","import isString from './isString'\r\n\r\nconst isSVG = (str) => {\r\n  const declaration = '(?:<\\\\?xml[^>]*>\\\\s*)?'\r\n  const doctype =\r\n    '(?:<\\\\!doctype svg[^>]*\\\\s*(?:\\\\[?(?:\\\\s*<![^>]*>\\\\s*)*\\\\]?)*[^>]*>\\\\s*)?'\r\n  const content = '<svg[^>]*>[^]*<\\\\/svg>\\\\s*$'\r\n  const svg = `^\\\\s*${declaration}${doctype}${content}\\\\s*$`\r\n  const pattern = new RegExp(svg, 'i')\r\n\r\n  return isString(str) && pattern.test(str)\r\n}\r\n\r\nexport default isSVG\r\n","import createElement from './createElement'\r\n\r\n/**\r\n * 创建 SVG 图标 DOM 元素\r\n * ========================================================================\r\n * @method icon\r\n * @alias createElement\r\n * @see createElement\r\n * @param {String} name\r\n * @param {Object} [options]\r\n * @param {Number|Array} [options.size]\r\n * @param {String} [options.color]\r\n * @param {String} [options.iconSet]\r\n * @param {Object} [options.attrs]\r\n * @returns {HTMLElement}\r\n */\r\nconst icon = (name, options = {}) => {\r\n  return createElement(name, options)\r\n}\r\n\r\nexport default icon\r\n"],"names":["toString","val","Object","prototype","apply","isString","str","isObject","o","setAttributes","el","attrs","keys","forEach","attr","value","obj","prop","hasOwnProperty","call","hasOwn","tagName","toLowerCase","style","cssText","setAttribute","className","innerHTML","innerText","createElement","name","options","ICON","size","isArraySize","Array","isArray","color","iconSet","width","height","defaultRules","cssRules","$icon","document","$svg","binds","svg","pattern","RegExp","test","isSVG","querySelector","xmlns","class"],"mappings":"qOAOA,MAAMA,EAAYC,GACTC,OAAOC,UAAUH,SAASI,MAAMH,GCDnCI,EAAYC,GACM,iBAARA,ECEVC,EAAYC,IAChB,OACmB,oBAAhBR,EAASQ,IACK,iBAANA,ICHW,mBADJP,EDKHO,ICJuC,sBAAlBR,EAASC,MDKrC,OAANO,ECNe,IAACP,CDOjB,EEZGQ,EAAgB,CAACC,EAAIC,KACzB,IAAKD,IAAOH,EAASI,GACnB,OAAO,EAGTT,OAAOU,KAAKD,GAAOE,SAASC,IAC1B,MAAMC,EAAQJ,EAAMG,GCFT,EAACE,EAAKC,KACnB,MAAMC,EAAiBhB,OAAOC,UAAUe,eACxC,OAAOF,GAAOE,EAAeC,KAAKH,EAAKC,EAAI,EDCrCG,CAAOT,EAAOG,IEHD,EAACJ,EAAII,EAAMC,KAC9B,IAAIM,EAAUX,EAAGW,QAAQC,cAEzB,OAAQR,GACN,IAAK,QACHJ,EAAGa,MAAMC,QAAUT,EACnB,MACF,IAAK,QACa,UAAZM,GAAmC,aAAZA,EACzBX,EAAGK,MAAQA,EAEXL,EAAGe,aAAaX,EAAMC,GAExB,MACF,IAAK,YACHL,EAAGgB,UAAYX,EACf,MACF,IAAK,YACHL,EAAGiB,UAAYZ,EACf,MACF,IAAK,YACHL,EAAGkB,UAAYb,EACf,MACF,QACEL,EAAGe,aAAaX,EAAMC,GAEzB,EFtBGU,CAAaf,EAAII,EAAMC,EACxB,GACD,EGGEc,EAAgB,CAACC,EAAMC,EAAU,MACrC,MAAMC,EAAO,WACPC,EAAOF,EAAQE,MAAQ,EACvBC,GCXS1B,EDWayB,ECVxBE,MAAMC,QACDD,MAAMC,QAAQ5B,GAEE,mBAAhBR,EAASQ,IAJJ,IAACA,EDYf,MAAM6B,EAAQN,EAAQM,OAAS,GACzBC,EAAUP,EAAQO,SAAW,GAC7BC,EAAQL,EAAcD,EAAK,GAAKA,EAChCO,EAASN,EAAcD,EAAK,GAAKA,EACjCQ,EAAeR,EAAO,SAASM,cAAkBC,OAAc,GAC/DE,EAAWL,EAAQI,EAAe,SAASJ,IAAUI,EACrD9B,EAAQoB,EAAQpB,OAAS,CAAE,EAC3BgC,EAAQC,SAASf,cAAc,KACrC,IAEIgB,EAFAC,EAAQ,GACRC,EAAM,GAGV,OAAK1C,EAASyB,IE/BF,CAACxB,IACb,MAKM0C,EAAU,IAAIC,OADR,uIACoB,KAEhC,OAAO5C,EAASC,IAAQ0C,EAAQE,KAAK5C,EAAG,EF2BpC6C,CAAMrB,GACRiB,EAAMjB,GAENgB,EACER,GAAuB,SAAZA,EACP,gBAAgBA,UAAgBR,KAChC,qBAAqBA,KAC3BiB,EAAM,aAAaD,kBAGrBH,EAAMhB,UAAYoB,EAEdpC,EAAMe,UACRf,EAAMe,UAAY,GAAGM,KAAQrB,EAAMe,YAEnCf,EAAMe,UAAY,GAAGM,IAGvBvB,EAAckC,EAAOhC,GAErBkC,EAAOF,EAAMS,cAAc,OAC3B3C,EAAcoC,EAAM,CAClB,eAAe,EACfQ,MAAO,6BACPC,MAAO,gBACPf,MAAO,IACPC,OAAQ,IACRjB,MAAOmB,IAGFC,GAjCE,IAiCFA,QGnDI,CAACb,EAAMC,EAAU,KACrBF,EAAcC,EAAMC"}