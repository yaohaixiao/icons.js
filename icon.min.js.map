{"version":3,"file":"icon.min.js","sources":["utils/toString.js","utils/isArray.js","utils/isString.js","utils/isSVG.js","icon.js","createElement.js"],"sourcesContent":["/**\n * Object 对象原型上的 toString 方法\n * ========================================================================\n * @method toString\n * @param {*} val\n * @returns {string}\n */\nconst toString = (val) => {\n  return Object.prototype.toString.apply(val)\n}\n\nexport default toString\n","import toString from './toString'\r\n\r\n/**\r\n * 检测数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isArray = (o) => {\r\n  if (Array.isArray) {\r\n    return Array.isArray(o)\r\n  } else {\r\n    return toString(o) === '[object Array]'\r\n  }\r\n}\r\n\r\nexport default isArray\r\n","/**\n * 检测数据是否为 String 类型\n * ========================================================================\n * @method isArray\n * @param {*} str\n * @returns {boolean}\n */\nconst isString = (str) => {\n  return typeof str === 'string'\n}\n\nexport default isString\n","import isString from './isString'\r\n\r\nconst isSVG = (str) => {\r\n  const declaration = '(?:<\\\\?xml[^>]*>\\\\s*)?'\r\n  const doctype =\r\n    '(?:<\\\\!doctype svg[^>]*\\\\s*(?:\\\\[?(?:\\\\s*<![^>]*>\\\\s*)*\\\\]?)*[^>]*>\\\\s*)?'\r\n  const content = '<svg[^>]*>[^]*<\\\\/svg>\\\\s*$'\r\n  const svg = `^\\\\s*${declaration}${doctype}${content}\\\\s*$`\r\n  const pattern = new RegExp(svg, 'i')\r\n\r\n  return isString(str) && pattern.test(str)\r\n}\r\n\r\nexport default isSVG\r\n","import createElement from './createElement'\r\n\r\n/**\r\n * 创建 SVG 图标 DOM 元素\r\n * ========================================================================\r\n * @method icon\r\n * @alias createElement\r\n * @see createElement\r\n * @param {String} name\r\n * @param {Object} [options]\r\n * @param {Number|Array} [options.size]\r\n * @param {String} [options.color]\r\n * @param {String} [options.iconSet]\r\n * @returns {HTMLElement}\r\n */\r\nconst icon = (name, options = {}) => {\r\n  return createElement(name, options)\r\n}\r\n\r\nexport default icon\r\n","import isArray from './utils/isArray'\r\nimport isString from './utils/isString'\r\nimport isSVG from './utils/isSVG'\r\n\r\n/**\r\n * 创建 SVG 图标 DOM 元素\r\n * ========================================================================\r\n * @method createElement\r\n * @param {String} name - （必须）当前图标集中的图标名称或者完整的 SVG 图标字符串\r\n * @param {Object} [options] - （可选）配置参数对象\r\n * @param {Number|Array} [options.size] - （可选）图标大小，Number 类型高和宽相等，Array 类型可以单独设置高和宽\r\n * @param {String} [options.color] - （可选）图标颜色\r\n * @param {String} [options.iconSet] - （可选）图标集的名称\r\n * @returns {HTMLElement}\r\n */\r\nconst createElement = (name, options = {}) => {\r\n  const size = options.size || 0\r\n  const color = options.color || ''\r\n  const iconSet = options.iconSet || ''\r\n  const width = isArray(size) ? size[0] : size\r\n  const height = isArray(size) ? size[1] : size\r\n  const defaultRules = size ? `width:${width}px;height:${height}px;` : ''\r\n  const cssRules = color ? defaultRules + `color:${color}` : defaultRules\r\n  const $icon = document.createElement('i')\r\n  let binds = ''\r\n  let svg = ''\r\n  let $svg\r\n\r\n  if (!isString(name)) {\r\n    return null\r\n  }\r\n\r\n  if (isSVG(name)) {\r\n    svg = name\r\n  } else {\r\n    binds =\r\n      iconSet && iconSet !== 'icon'\r\n        ? `xlink:href=\"#${iconSet}-icon-${name}\"`\r\n        : `xlink:href=\"#icon-${name}\"`\r\n    svg =\r\n      `<svg aria-hidden=\"true\" class=\"ijs-icon__svg\" style=\"${cssRules}\">` +\r\n      `<use ${binds}></use>` +\r\n      `</svg>`\r\n  }\r\n\r\n  $icon.className = 'ijs-icon'\r\n  $icon.innerHTML = svg\r\n\r\n  if (isSVG(name)) {\r\n    $svg = $icon.querySelector('svg')\r\n    $svg.setAttribute('aria-hidden', 'true')\r\n    $svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg')\r\n    $svg.setAttribute('class', 'ijs-icon__svg')\r\n    $svg.setAttribute('width', '200')\r\n    $svg.setAttribute('height', '200')\r\n    $svg.style.cssText = cssRules\r\n  }\r\n\r\n  return $icon\r\n}\r\n\r\nexport default createElement\r\n"],"names":["isArray","o","Array","val","Object","prototype","toString","apply","isString","str","isSVG","pattern","RegExp","test","name","options","size","color","iconSet","width","height","defaultRules","cssRules","$icon","document","createElement","$svg","binds","svg","className","innerHTML","querySelector","setAttribute","style","cssText"],"mappings":"qOAOA,MCEMA,EAAWC,IACf,OAAIC,MAAMF,QACDE,MAAMF,QAAQC,GAEE,oBDNTE,ECMEF,EDLXG,OAAOC,UAAUC,SAASC,MAAMJ,IADxB,IAACA,CCOf,ECPGK,EAAYC,GACM,iBAARA,ECNVC,EAASD,IACb,MAKME,EAAU,IAAIC,OADR,uIACoB,KAEhC,OAAOJ,EAASC,IAAQE,EAAQE,KAAKJ,EAAG,QCK7B,CAACK,EAAMC,EAAU,KCAR,EAACD,EAAMC,EAAU,MACrC,MAAMC,EAAOD,EAAQC,MAAQ,EACvBC,EAAQF,EAAQE,OAAS,GACzBC,EAAUH,EAAQG,SAAW,GAC7BC,EAAQnB,EAAQgB,GAAQA,EAAK,GAAKA,EAClCI,EAASpB,EAAQgB,GAAQA,EAAK,GAAKA,EACnCK,EAAeL,EAAO,SAASG,cAAkBC,OAAc,GAC/DE,EAAWL,EAAQI,EAAe,SAASJ,IAAUI,EACrDE,EAAQC,SAASC,cAAc,KACrC,IAEIC,EAFAC,EAAQ,GACRC,EAAM,GAGV,OAAKpB,EAASM,IAIVJ,EAAMI,GACRc,EAAMd,GAENa,EACET,GAAuB,SAAZA,EACP,gBAAgBA,UAAgBJ,KAChC,qBAAqBA,KAC3Bc,EACE,wDAAwDN,WAChDK,kBAIZJ,EAAMM,UAAY,WAClBN,EAAMO,UAAYF,EAEdlB,EAAMI,KACRY,EAAOH,EAAMQ,cAAc,OAC3BL,EAAKM,aAAa,cAAe,QACjCN,EAAKM,aAAa,QAAS,8BAC3BN,EAAKM,aAAa,QAAS,iBAC3BN,EAAKM,aAAa,QAAS,OAC3BN,EAAKM,aAAa,SAAU,OAC5BN,EAAKO,MAAMC,QAAUZ,GAGhBC,GA7BE,IA6BFA,ED1CAE,CAAcX,EAAMC"}